# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: friend/firend_data.proto, friend/friend.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FriendInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    uin: int = betterproto.uint64_field(2)
    qid: str = betterproto.string_field(3)
    nick: str = betterproto.string_field(4)
    age: int = betterproto.uint32_field(5)
    level: int = betterproto.uint32_field(6)
    vote_cnt: int = betterproto.uint32_field(7)
    gender: int = betterproto.int32_field(8)
    group_id: int = betterproto.int32_field(9)
    remark: str = betterproto.string_field(10)
    ext: Optional[bytes] = betterproto.bytes_field(99, optional=True, group="_ext")


@dataclass(eq=False, repr=False)
class FriendExt(betterproto.Message):
    """通用好友信息扩展字段 所有第三方协议分发扩展字段， 必须基于本字段修改， 并保存定制的副本到本仓库特定路径！！"""

    big_vip: Optional[bool] = betterproto.bool_field(1, optional=True, group="_big_vip")
    hollywood_vip: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_hollywood_vip"
    )
    qq_vip: Optional[bool] = betterproto.bool_field(3, optional=True, group="_qq_vip")
    super_vip: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_super_vip"
    )
    voted: Optional[bool] = betterproto.bool_field(5, optional=True, group="_voted")


@dataclass(eq=False, repr=False)
class GetFriendListRequest(betterproto.Message):
    refresh: Optional[bool] = betterproto.bool_field(1, optional=True, group="_refresh")


@dataclass(eq=False, repr=False)
class GetFriendListResponse(betterproto.Message):
    friends_info: List["FriendInfo"] = betterproto.message_field(1)


class FriendServiceStub(betterproto.ServiceStub):
    async def get_friend_list(
        self,
        get_friend_list_request: "GetFriendListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetFriendListResponse":
        return await self._unary_unary(
            "/kritor.friend.FriendService/GetFriendList",
            get_friend_list_request,
            GetFriendListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FriendServiceBase(ServiceBase):

    async def get_friend_list(
        self, get_friend_list_request: "GetFriendListRequest"
    ) -> "GetFriendListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_friend_list(
        self,
        stream: "grpclib.server.Stream[GetFriendListRequest, GetFriendListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_friend_list(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kritor.friend.FriendService/GetFriendList": grpclib.const.Handler(
                self.__rpc_get_friend_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetFriendListRequest,
                GetFriendListResponse,
            ),
        }
