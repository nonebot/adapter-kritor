# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: web/web.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, Optional

import grpclib
import betterproto
from betterproto.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from grpclib.metadata import Deadline
    from betterproto.grpc.grpclib_client import MetadataLike


@dataclass(eq=False, repr=False)
class GetCookiesRequest(betterproto.Message):
    domain: Optional[str] = betterproto.string_field(1, optional=True, group="_domain")


@dataclass(eq=False, repr=False)
class GetCookiesResponse(betterproto.Message):
    cookie: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCredentialsRequest(betterproto.Message):
    domain: Optional[str] = betterproto.string_field(1, optional=True, group="_domain")


@dataclass(eq=False, repr=False)
class GetCredentialsResponse(betterproto.Message):
    bkn: str = betterproto.string_field(1)
    cookie: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCsrfTokenRequest(betterproto.Message):
    domain: Optional[str] = betterproto.string_field(1, optional=True, group="_domain")


@dataclass(eq=False, repr=False)
class GetCsrfTokenResponse(betterproto.Message):
    bkn: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetHttpCookiesRequest(betterproto.Message):
    appid: str = betterproto.string_field(1)
    daid: str = betterproto.string_field(2)
    jump_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetHttpCookiesResponse(betterproto.Message):
    cookie: str = betterproto.string_field(1)


class WebServiceStub(betterproto.ServiceStub):
    async def get_cookies(
        self,
        get_cookies_request: "GetCookiesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetCookiesResponse":
        return await self._unary_unary(
            "/kritor.web.WebService/GetCookies",
            get_cookies_request,
            GetCookiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_credentials(
        self,
        get_credentials_request: "GetCredentialsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetCredentialsResponse":
        return await self._unary_unary(
            "/kritor.web.WebService/GetCredentials",
            get_credentials_request,
            GetCredentialsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_csrf_token(
        self,
        get_csrf_token_request: "GetCsrfTokenRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetCsrfTokenResponse":
        return await self._unary_unary(
            "/kritor.web.WebService/GetCSRFToken",
            get_csrf_token_request,
            GetCsrfTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_http_cookies(
        self,
        get_http_cookies_request: "GetHttpCookiesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetHttpCookiesResponse":
        return await self._unary_unary(
            "/kritor.web.WebService/GetHttpCookies",
            get_http_cookies_request,
            GetHttpCookiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WebServiceBase(ServiceBase):

    async def get_cookies(self, get_cookies_request: "GetCookiesRequest") -> "GetCookiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_credentials(self, get_credentials_request: "GetCredentialsRequest") -> "GetCredentialsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_csrf_token(self, get_csrf_token_request: "GetCsrfTokenRequest") -> "GetCsrfTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_http_cookies(self, get_http_cookies_request: "GetHttpCookiesRequest") -> "GetHttpCookiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_cookies(self, stream: "grpclib.server.Stream[GetCookiesRequest, GetCookiesResponse]") -> None:
        request = await stream.recv_message()
        response = await self.get_cookies(request)
        await stream.send_message(response)

    async def __rpc_get_credentials(
        self,
        stream: "grpclib.server.Stream[GetCredentialsRequest, GetCredentialsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_credentials(request)
        await stream.send_message(response)

    async def __rpc_get_csrf_token(
        self, stream: "grpclib.server.Stream[GetCsrfTokenRequest, GetCsrfTokenResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_csrf_token(request)
        await stream.send_message(response)

    async def __rpc_get_http_cookies(
        self,
        stream: "grpclib.server.Stream[GetHttpCookiesRequest, GetHttpCookiesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_http_cookies(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kritor.web.WebService/GetCookies": grpclib.const.Handler(
                self.__rpc_get_cookies,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCookiesRequest,
                GetCookiesResponse,
            ),
            "/kritor.web.WebService/GetCredentials": grpclib.const.Handler(
                self.__rpc_get_credentials,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCredentialsRequest,
                GetCredentialsResponse,
            ),
            "/kritor.web.WebService/GetCSRFToken": grpclib.const.Handler(
                self.__rpc_get_csrf_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCsrfTokenRequest,
                GetCsrfTokenResponse,
            ),
            "/kritor.web.WebService/GetHttpCookies": grpclib.const.Handler(
                self.__rpc_get_http_cookies,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetHttpCookiesRequest,
                GetHttpCookiesResponse,
            ),
        }
