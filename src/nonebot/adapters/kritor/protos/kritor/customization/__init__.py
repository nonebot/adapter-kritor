# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: developer/customization.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, Optional

import grpclib
import betterproto
from betterproto.grpc.grpclib_server import ServiceBase

from .. import common as _common__

if TYPE_CHECKING:
    import grpclib.server
    from grpclib.metadata import Deadline
    from betterproto.grpc.grpclib_client import MetadataLike


class CustomizationServiceStub(betterproto.ServiceStub):
    async def call_function(
        self,
        common_request: "_common__.Request",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "_common__.Response":
        return await self._unary_unary(
            "/kritor.customization.CustomizationService/CallFunction",
            common_request,
            _common__.Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CustomizationServiceBase(ServiceBase):

    async def call_function(self, common_request: "_common__.Request") -> "_common__.Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_call_function(self, stream: "grpclib.server.Stream[_common__.Request, _common__.Response]") -> None:
        request = await stream.recv_message()
        response = await self.call_function(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kritor.customization.CustomizationService/CallFunction": grpclib.const.Handler(
                self.__rpc_call_function,
                grpclib.const.Cardinality.UNARY_UNARY,
                _common__.Request,
                _common__.Response,
            ),
        }
