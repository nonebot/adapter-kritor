# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: group/group.proto, group/group_data.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, List, Optional

import grpclib
import betterproto
from betterproto.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from grpclib.metadata import Deadline
    from betterproto.grpc.grpclib_client import MetadataLike


class MemberRole(betterproto.Enum):
    ADMIN = 0
    MEMBER = 1
    OWNER = 2
    STRANGER = 3


@dataclass(eq=False, repr=False)
class GroupInfo(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    group_name: str = betterproto.string_field(2)
    group_remark: str = betterproto.string_field(3)
    owner: int = betterproto.uint64_field(4)
    admins: List[int] = betterproto.uint64_field(5)
    max_member_count: int = betterproto.uint32_field(6)
    member_count: int = betterproto.uint32_field(7)
    group_uin: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class NotJoinedGroupInfo(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    max_member_count: int = betterproto.uint32_field(2)
    member_count: int = betterproto.uint32_field(3)
    group_name: str = betterproto.string_field(4)
    group_desc: str = betterproto.string_field(5)
    owner: int = betterproto.uint64_field(6)
    create_time: int = betterproto.uint64_field(7)
    group_flag: int = betterproto.uint32_field(8)
    group_flag_ext: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ProhibitedUserInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    uin: int = betterproto.uint64_field(2)
    prohibited_time: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class GroupHonorInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    uin: int = betterproto.uint64_field(2)
    nick: str = betterproto.string_field(3)
    honor_name: str = betterproto.string_field(4)
    avatar: str = betterproto.string_field(5)
    id: int = betterproto.uint32_field(6)
    description: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class GroupMemberInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    uin: int = betterproto.uint64_field(2)
    nick: str = betterproto.string_field(3)
    age: int = betterproto.uint32_field(4)
    unique_title: str = betterproto.string_field(5)
    unique_title_expire_time: int = betterproto.uint64_field(6)
    card: str = betterproto.string_field(7)
    join_time: int = betterproto.uint64_field(8)
    last_active_time: int = betterproto.uint64_field(9)
    level: int = betterproto.uint32_field(10)
    shut_up_time: int = betterproto.uint64_field(11)
    distance: Optional[int] = betterproto.uint32_field(100, optional=True, group="_distance")
    honors: List[int] = betterproto.uint32_field(101)
    unfriendly: Optional[bool] = betterproto.bool_field(102, optional=True, group="_unfriendly")
    card_changeable: Optional[bool] = betterproto.bool_field(103, optional=True, group="_card_changeable")


@dataclass(eq=False, repr=False)
class BanMemberRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    duration: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BanMemberResponse(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class PokeMemberRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")


@dataclass(eq=False, repr=False)
class PokeMemberResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class KickMemberRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    reject_add_request: Optional[bool] = betterproto.bool_field(6, optional=True, group="_reject_add_request")
    kick_reason: Optional[str] = betterproto.string_field(5, optional=True, group="_kick_reason")


@dataclass(eq=False, repr=False)
class KickMemberResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveGroupRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class LeaveGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ModifyMemberCardRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    card: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ModifyMemberCardResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ModifyGroupNameRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    group_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ModifyGroupNameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ModifyGroupRemarkRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    remark: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ModifyGroupRemarkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetGroupAdminRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    is_admin: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class SetGroupAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetGroupUniqueTitleRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    unique_title: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class SetGroupUniqueTitleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetGroupWholeBanRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    is_ban: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetGroupWholeBanResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetGroupInfoRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetGroupInfoResponse(betterproto.Message):
    group_info: "GroupInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetGroupListRequest(betterproto.Message):
    refresh: Optional[bool] = betterproto.bool_field(1, optional=True, group="_refresh")


@dataclass(eq=False, repr=False)
class GetGroupListResponse(betterproto.Message):
    groups_info: List["GroupInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetGroupMemberInfoRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    target_uid: str = betterproto.string_field(2, group="target")
    target_uin: int = betterproto.uint64_field(3, group="target")
    refresh: Optional[bool] = betterproto.bool_field(4, optional=True, group="_refresh")


@dataclass(eq=False, repr=False)
class GetGroupMemberInfoResponse(betterproto.Message):
    group_member_info: "GroupMemberInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetGroupMemberListRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    refresh: Optional[bool] = betterproto.bool_field(2, optional=True, group="_refresh")


@dataclass(eq=False, repr=False)
class GetGroupMemberListResponse(betterproto.Message):
    group_members_info: List["GroupMemberInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetProhibitedUserListRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetProhibitedUserListResponse(betterproto.Message):
    prohibited_users_info: List["ProhibitedUserInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRemainCountAtAllRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetRemainCountAtAllResponse(betterproto.Message):
    access_at_all: bool = betterproto.bool_field(1)
    remain_count_for_group: int = betterproto.uint32_field(2)
    remain_count_for_self: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetNotJoinedGroupInfoRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetNotJoinedGroupInfoResponse(betterproto.Message):
    group_info: "NotJoinedGroupInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetGroupHonorRequest(betterproto.Message):
    group_id: int = betterproto.uint64_field(1)
    refresh: Optional[bool] = betterproto.bool_field(2, optional=True, group="_refresh")


@dataclass(eq=False, repr=False)
class GetGroupHonorResponse(betterproto.Message):
    group_honors_info: List["GroupHonorInfo"] = betterproto.message_field(1)


class GroupServiceStub(betterproto.ServiceStub):
    async def ban_member(
        self,
        ban_member_request: "BanMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "BanMemberResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/BanMember",
            ban_member_request,
            BanMemberResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def poke_member(
        self,
        poke_member_request: "PokeMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "PokeMemberResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/PokeMember",
            poke_member_request,
            PokeMemberResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def kick_member(
        self,
        kick_member_request: "KickMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "KickMemberResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/KickMember",
            kick_member_request,
            KickMemberResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_group(
        self,
        leave_group_request: "LeaveGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "LeaveGroupResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/LeaveGroup",
            leave_group_request,
            LeaveGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_member_card(
        self,
        modify_member_card_request: "ModifyMemberCardRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ModifyMemberCardResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/ModifyMemberCard",
            modify_member_card_request,
            ModifyMemberCardResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_group_name(
        self,
        modify_group_name_request: "ModifyGroupNameRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ModifyGroupNameResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/ModifyGroupName",
            modify_group_name_request,
            ModifyGroupNameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_group_remark(
        self,
        modify_group_remark_request: "ModifyGroupRemarkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ModifyGroupRemarkResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/ModifyGroupRemark",
            modify_group_remark_request,
            ModifyGroupRemarkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_group_admin(
        self,
        set_group_admin_request: "SetGroupAdminRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetGroupAdminResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/SetGroupAdmin",
            set_group_admin_request,
            SetGroupAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_group_unique_title(
        self,
        set_group_unique_title_request: "SetGroupUniqueTitleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetGroupUniqueTitleResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/SetGroupUniqueTitle",
            set_group_unique_title_request,
            SetGroupUniqueTitleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_group_whole_ban(
        self,
        set_group_whole_ban_request: "SetGroupWholeBanRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetGroupWholeBanResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/SetGroupWholeBan",
            set_group_whole_ban_request,
            SetGroupWholeBanResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_group_info(
        self,
        get_group_info_request: "GetGroupInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetGroupInfoResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetGroupInfo",
            get_group_info_request,
            GetGroupInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_group_list(
        self,
        get_group_list_request: "GetGroupListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetGroupListResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetGroupList",
            get_group_list_request,
            GetGroupListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_group_member_info(
        self,
        get_group_member_info_request: "GetGroupMemberInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetGroupMemberInfoResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetGroupMemberInfo",
            get_group_member_info_request,
            GetGroupMemberInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_group_member_list(
        self,
        get_group_member_list_request: "GetGroupMemberListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetGroupMemberListResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetGroupMemberList",
            get_group_member_list_request,
            GetGroupMemberListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_prohibited_user_list(
        self,
        get_prohibited_user_list_request: "GetProhibitedUserListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetProhibitedUserListResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetProhibitedUserList",
            get_prohibited_user_list_request,
            GetProhibitedUserListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_remain_count_at_all(
        self,
        get_remain_count_at_all_request: "GetRemainCountAtAllRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetRemainCountAtAllResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetRemainCountAtAll",
            get_remain_count_at_all_request,
            GetRemainCountAtAllResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_not_joined_group_info(
        self,
        get_not_joined_group_info_request: "GetNotJoinedGroupInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetNotJoinedGroupInfoResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetNotJoinedGroupInfo",
            get_not_joined_group_info_request,
            GetNotJoinedGroupInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_group_honor(
        self,
        get_group_honor_request: "GetGroupHonorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetGroupHonorResponse":
        return await self._unary_unary(
            "/kritor.group.GroupService/GetGroupHonor",
            get_group_honor_request,
            GetGroupHonorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class GroupServiceBase(ServiceBase):

    async def ban_member(self, ban_member_request: "BanMemberRequest") -> "BanMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def poke_member(self, poke_member_request: "PokeMemberRequest") -> "PokeMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def kick_member(self, kick_member_request: "KickMemberRequest") -> "KickMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_group(self, leave_group_request: "LeaveGroupRequest") -> "LeaveGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_member_card(
        self, modify_member_card_request: "ModifyMemberCardRequest"
    ) -> "ModifyMemberCardResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_group_name(self, modify_group_name_request: "ModifyGroupNameRequest") -> "ModifyGroupNameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_group_remark(
        self, modify_group_remark_request: "ModifyGroupRemarkRequest"
    ) -> "ModifyGroupRemarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_group_admin(self, set_group_admin_request: "SetGroupAdminRequest") -> "SetGroupAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_group_unique_title(
        self, set_group_unique_title_request: "SetGroupUniqueTitleRequest"
    ) -> "SetGroupUniqueTitleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_group_whole_ban(
        self, set_group_whole_ban_request: "SetGroupWholeBanRequest"
    ) -> "SetGroupWholeBanResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_group_info(self, get_group_info_request: "GetGroupInfoRequest") -> "GetGroupInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_group_list(self, get_group_list_request: "GetGroupListRequest") -> "GetGroupListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_group_member_info(
        self, get_group_member_info_request: "GetGroupMemberInfoRequest"
    ) -> "GetGroupMemberInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_group_member_list(
        self, get_group_member_list_request: "GetGroupMemberListRequest"
    ) -> "GetGroupMemberListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_prohibited_user_list(
        self, get_prohibited_user_list_request: "GetProhibitedUserListRequest"
    ) -> "GetProhibitedUserListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_remain_count_at_all(
        self, get_remain_count_at_all_request: "GetRemainCountAtAllRequest"
    ) -> "GetRemainCountAtAllResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_not_joined_group_info(
        self, get_not_joined_group_info_request: "GetNotJoinedGroupInfoRequest"
    ) -> "GetNotJoinedGroupInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_group_honor(self, get_group_honor_request: "GetGroupHonorRequest") -> "GetGroupHonorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ban_member(self, stream: "grpclib.server.Stream[BanMemberRequest, BanMemberResponse]") -> None:
        request = await stream.recv_message()
        response = await self.ban_member(request)
        await stream.send_message(response)

    async def __rpc_poke_member(self, stream: "grpclib.server.Stream[PokeMemberRequest, PokeMemberResponse]") -> None:
        request = await stream.recv_message()
        response = await self.poke_member(request)
        await stream.send_message(response)

    async def __rpc_kick_member(self, stream: "grpclib.server.Stream[KickMemberRequest, KickMemberResponse]") -> None:
        request = await stream.recv_message()
        response = await self.kick_member(request)
        await stream.send_message(response)

    async def __rpc_leave_group(self, stream: "grpclib.server.Stream[LeaveGroupRequest, LeaveGroupResponse]") -> None:
        request = await stream.recv_message()
        response = await self.leave_group(request)
        await stream.send_message(response)

    async def __rpc_modify_member_card(
        self,
        stream: "grpclib.server.Stream[ModifyMemberCardRequest, ModifyMemberCardResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_member_card(request)
        await stream.send_message(response)

    async def __rpc_modify_group_name(
        self,
        stream: "grpclib.server.Stream[ModifyGroupNameRequest, ModifyGroupNameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_group_name(request)
        await stream.send_message(response)

    async def __rpc_modify_group_remark(
        self,
        stream: "grpclib.server.Stream[ModifyGroupRemarkRequest, ModifyGroupRemarkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_group_remark(request)
        await stream.send_message(response)

    async def __rpc_set_group_admin(
        self,
        stream: "grpclib.server.Stream[SetGroupAdminRequest, SetGroupAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_group_admin(request)
        await stream.send_message(response)

    async def __rpc_set_group_unique_title(
        self,
        stream: "grpclib.server.Stream[SetGroupUniqueTitleRequest, SetGroupUniqueTitleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_group_unique_title(request)
        await stream.send_message(response)

    async def __rpc_set_group_whole_ban(
        self,
        stream: "grpclib.server.Stream[SetGroupWholeBanRequest, SetGroupWholeBanResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_group_whole_ban(request)
        await stream.send_message(response)

    async def __rpc_get_group_info(
        self, stream: "grpclib.server.Stream[GetGroupInfoRequest, GetGroupInfoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_group_info(request)
        await stream.send_message(response)

    async def __rpc_get_group_list(
        self, stream: "grpclib.server.Stream[GetGroupListRequest, GetGroupListResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_group_list(request)
        await stream.send_message(response)

    async def __rpc_get_group_member_info(
        self,
        stream: "grpclib.server.Stream[GetGroupMemberInfoRequest, GetGroupMemberInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_group_member_info(request)
        await stream.send_message(response)

    async def __rpc_get_group_member_list(
        self,
        stream: "grpclib.server.Stream[GetGroupMemberListRequest, GetGroupMemberListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_group_member_list(request)
        await stream.send_message(response)

    async def __rpc_get_prohibited_user_list(
        self,
        stream: "grpclib.server.Stream[GetProhibitedUserListRequest, GetProhibitedUserListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_prohibited_user_list(request)
        await stream.send_message(response)

    async def __rpc_get_remain_count_at_all(
        self,
        stream: "grpclib.server.Stream[GetRemainCountAtAllRequest, GetRemainCountAtAllResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_remain_count_at_all(request)
        await stream.send_message(response)

    async def __rpc_get_not_joined_group_info(
        self,
        stream: "grpclib.server.Stream[GetNotJoinedGroupInfoRequest, GetNotJoinedGroupInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_not_joined_group_info(request)
        await stream.send_message(response)

    async def __rpc_get_group_honor(
        self,
        stream: "grpclib.server.Stream[GetGroupHonorRequest, GetGroupHonorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_group_honor(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kritor.group.GroupService/BanMember": grpclib.const.Handler(
                self.__rpc_ban_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                BanMemberRequest,
                BanMemberResponse,
            ),
            "/kritor.group.GroupService/PokeMember": grpclib.const.Handler(
                self.__rpc_poke_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                PokeMemberRequest,
                PokeMemberResponse,
            ),
            "/kritor.group.GroupService/KickMember": grpclib.const.Handler(
                self.__rpc_kick_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                KickMemberRequest,
                KickMemberResponse,
            ),
            "/kritor.group.GroupService/LeaveGroup": grpclib.const.Handler(
                self.__rpc_leave_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                LeaveGroupRequest,
                LeaveGroupResponse,
            ),
            "/kritor.group.GroupService/ModifyMemberCard": grpclib.const.Handler(
                self.__rpc_modify_member_card,
                grpclib.const.Cardinality.UNARY_UNARY,
                ModifyMemberCardRequest,
                ModifyMemberCardResponse,
            ),
            "/kritor.group.GroupService/ModifyGroupName": grpclib.const.Handler(
                self.__rpc_modify_group_name,
                grpclib.const.Cardinality.UNARY_UNARY,
                ModifyGroupNameRequest,
                ModifyGroupNameResponse,
            ),
            "/kritor.group.GroupService/ModifyGroupRemark": grpclib.const.Handler(
                self.__rpc_modify_group_remark,
                grpclib.const.Cardinality.UNARY_UNARY,
                ModifyGroupRemarkRequest,
                ModifyGroupRemarkResponse,
            ),
            "/kritor.group.GroupService/SetGroupAdmin": grpclib.const.Handler(
                self.__rpc_set_group_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGroupAdminRequest,
                SetGroupAdminResponse,
            ),
            "/kritor.group.GroupService/SetGroupUniqueTitle": grpclib.const.Handler(
                self.__rpc_set_group_unique_title,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGroupUniqueTitleRequest,
                SetGroupUniqueTitleResponse,
            ),
            "/kritor.group.GroupService/SetGroupWholeBan": grpclib.const.Handler(
                self.__rpc_set_group_whole_ban,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGroupWholeBanRequest,
                SetGroupWholeBanResponse,
            ),
            "/kritor.group.GroupService/GetGroupInfo": grpclib.const.Handler(
                self.__rpc_get_group_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGroupInfoRequest,
                GetGroupInfoResponse,
            ),
            "/kritor.group.GroupService/GetGroupList": grpclib.const.Handler(
                self.__rpc_get_group_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGroupListRequest,
                GetGroupListResponse,
            ),
            "/kritor.group.GroupService/GetGroupMemberInfo": grpclib.const.Handler(
                self.__rpc_get_group_member_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGroupMemberInfoRequest,
                GetGroupMemberInfoResponse,
            ),
            "/kritor.group.GroupService/GetGroupMemberList": grpclib.const.Handler(
                self.__rpc_get_group_member_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGroupMemberListRequest,
                GetGroupMemberListResponse,
            ),
            "/kritor.group.GroupService/GetProhibitedUserList": grpclib.const.Handler(
                self.__rpc_get_prohibited_user_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetProhibitedUserListRequest,
                GetProhibitedUserListResponse,
            ),
            "/kritor.group.GroupService/GetRemainCountAtAll": grpclib.const.Handler(
                self.__rpc_get_remain_count_at_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRemainCountAtAllRequest,
                GetRemainCountAtAllResponse,
            ),
            "/kritor.group.GroupService/GetNotJoinedGroupInfo": grpclib.const.Handler(
                self.__rpc_get_not_joined_group_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNotJoinedGroupInfoRequest,
                GetNotJoinedGroupInfoResponse,
            ),
            "/kritor.group.GroupService/GetGroupHonor": grpclib.const.Handler(
                self.__rpc_get_group_honor,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGroupHonorRequest,
                GetGroupHonorResponse,
            ),
        }
