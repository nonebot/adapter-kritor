# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: process/process.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, Optional

import grpclib
import betterproto
from betterproto.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from grpclib.metadata import Deadline
    from betterproto.grpc.grpclib_client import MetadataLike


@dataclass(eq=False, repr=False)
class SetFriendApplyResultRequest(betterproto.Message):
    request_id: str = betterproto.string_field(1)
    is_approve: bool = betterproto.bool_field(2)
    remark: Optional[str] = betterproto.string_field(3, optional=True, group="_remark")


@dataclass(eq=False, repr=False)
class SetFriendApplyResultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetGroupApplyResultRequest(betterproto.Message):
    request_id: str = betterproto.string_field(1)
    is_approve: bool = betterproto.bool_field(2)
    deny_reason: Optional[str] = betterproto.string_field(3, optional=True, group="_deny_reason")


@dataclass(eq=False, repr=False)
class SetGroupApplyResultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetInvitedJoinGroupResultRequest(betterproto.Message):
    request_id: str = betterproto.string_field(1)
    is_approve: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetInvitedJoinGroupResultResponse(betterproto.Message):
    pass


class ProcessServiceStub(betterproto.ServiceStub):
    async def set_friend_apply_result(
        self,
        set_friend_apply_result_request: "SetFriendApplyResultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetFriendApplyResultResponse":
        return await self._unary_unary(
            "/kritor.process.ProcessService/SetFriendApplyResult",
            set_friend_apply_result_request,
            SetFriendApplyResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_group_apply_result(
        self,
        set_group_apply_result_request: "SetGroupApplyResultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetGroupApplyResultResponse":
        return await self._unary_unary(
            "/kritor.process.ProcessService/SetGroupApplyResult",
            set_group_apply_result_request,
            SetGroupApplyResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_invited_join_group_result(
        self,
        set_invited_join_group_result_request: "SetInvitedJoinGroupResultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SetInvitedJoinGroupResultResponse":
        return await self._unary_unary(
            "/kritor.process.ProcessService/SetInvitedJoinGroupResult",
            set_invited_join_group_result_request,
            SetInvitedJoinGroupResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ProcessServiceBase(ServiceBase):

    async def set_friend_apply_result(
        self, set_friend_apply_result_request: "SetFriendApplyResultRequest"
    ) -> "SetFriendApplyResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_group_apply_result(
        self, set_group_apply_result_request: "SetGroupApplyResultRequest"
    ) -> "SetGroupApplyResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_invited_join_group_result(
        self, set_invited_join_group_result_request: "SetInvitedJoinGroupResultRequest"
    ) -> "SetInvitedJoinGroupResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_set_friend_apply_result(
        self,
        stream: "grpclib.server.Stream[SetFriendApplyResultRequest, SetFriendApplyResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_friend_apply_result(request)
        await stream.send_message(response)

    async def __rpc_set_group_apply_result(
        self,
        stream: "grpclib.server.Stream[SetGroupApplyResultRequest, SetGroupApplyResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_group_apply_result(request)
        await stream.send_message(response)

    async def __rpc_set_invited_join_group_result(
        self,
        stream: "grpclib.server.Stream[SetInvitedJoinGroupResultRequest, SetInvitedJoinGroupResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_invited_join_group_result(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kritor.process.ProcessService/SetFriendApplyResult": grpclib.const.Handler(
                self.__rpc_set_friend_apply_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetFriendApplyResultRequest,
                SetFriendApplyResultResponse,
            ),
            "/kritor.process.ProcessService/SetGroupApplyResult": grpclib.const.Handler(
                self.__rpc_set_group_apply_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGroupApplyResultRequest,
                SetGroupApplyResultResponse,
            ),
            "/kritor.process.ProcessService/SetInvitedJoinGroupResult": grpclib.const.Handler(
                self.__rpc_set_invited_join_group_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetInvitedJoinGroupResultRequest,
                SetInvitedJoinGroupResultResponse,
            ),
        }
